name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
          node-version: '14'
    - name: Set up Git
      run: |
          git config --global user.name "chandrupsj22"
          git config --global user.email "133023965+chandru-kloudping@users.noreply.github.com"
#     - name: Replace tokens
#       uses: cschleiden/replace-tokens@v1
#       with:
#         files: /home/runner/work/AngularTestDemo/AngularTestDemo/file.txt
#         tokenPrefix: '#{'
#         tokenSuffix: '}#'
        
    - uses: cschleiden/replace-tokens@v1
      with:
         tokenPrefix: '#{'
         tokenSuffix: '}#'
         files: '["**/*.txt"]'
      env:
         username: ${{ USERNAME }}
         password: ${{ PASSWORD }}  
        
    - name: display file.txt
      run: |
        cat /home/runner/work/AngularTestDemo/AngularTestDemo/file.txt        
    - name: Fetch version from package.json
      run: |
          version=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          echo "$version" 
    - name: Create and push tag
      run: |
          version=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          Branch=$(basename "${{ github.ref }}")
          tagss=${Branch}_REPUI_BLD.${{ github.run_number }}-${version}
          tagss=$(echo "$tagss" | sed 's/[^A-Za-z0-9_.-]//g')
          git tag -a -m "Tag created by GitHub" "$tagss"
          git push origin "$tagss"
    - name: Add typings cordova-plugin-camera
      run: |
          npm install -g typings
          typings install dt~cordova-plugin-camera --global --save
          echo 'export PATH=$PATH:/opt/Node.js/v4.5.0/bin' >> $HOME/.bashrc
          source $HOME/.bashrc
          
    - name: Install dependencies
      run: npm install

    - name: Build Angular app
      run: npm run build
    - name: List Artifacts
      run: |
        ls ${{ steps.view.outputs.DEVebuild }}
        echo "****DEVBUILD****"
        ls /home/runner/work/AngularTestDemo/AngularTestDemo/dist/my-app
#     - name: Find HTML files
#       id: find-files
#       run: |
#           files=$(find . -name 'index.*\.html' -o -name '~dev.html')
#           #files=$(find . -name '~dev.html' -o -name 'index.*\.html')
#           echo "$files"
#           #rm -f $files
          
#     - name: Deploy to GitHub Pages
#       uses: peaceiris/actions-gh-pages@v3
#       with:
#           github_token: ${{ secrets.PAT }}
#           publish_dir: /home/runner/work/AngularTestDemo/AngularTestDemo/dist/my-app     
                
    - name: Create DEVebuild directory
      run: |
         files=$(find . -name 'index.*\.html' -o -name '*~dev.html')
         echo "$files"
         #rm -f $files
         files=$(find . -name 'index.*\.html' -o -name '*~dev.html')
         echo "$files"
         mkdir DEVebuild
         cp -r /home/runner/work/AngularTestDemo/AngularTestDemo/dist/* DEVebuild
         cd DEVebuild
         tar cf ../DEVebuild.tar .
    - name: Upload DEVebuild.tar artifact
      uses: actions/upload-artifact@v2
      with:
          name: DEVebuild
          path: DEVebuild.tar     
    - name: List Artifacts
      run: |
        echo "Build Artifacts: DEVebuild.tar"
        ls ${{ steps.view.outputs.DEVebuild }}
        echo "****DEVBUILD****"
        ls /home/runner/work/AngularTestDemo/AngularTestDemo/DEVebuild
        
             
#     - name: Upload Build Artifacts
#       uses: actions/upload-artifact@v2
#       with:
#         name: build-artifacts
#         path: build/
    
#     - name: List Artifacts
#       run: |
#         echo "Build Artifacts:"
#         ls ${{ steps.view.outputs.artifact_folder }}
#     - name: Display .jar File Name
#       run: |
#         echo "The .jar file name is: $(find build/ -name '*.jar')"
#     - name: Download and List Artifacts
#       uses: actions/download-artifact@v2
#       with:
#         name: build-artifacts
#         path: build-artifacts

   
